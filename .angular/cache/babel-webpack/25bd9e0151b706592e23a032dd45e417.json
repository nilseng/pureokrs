{"ast":null,"code":"import _classCallCheck from \"/Users/teodordanielsen/pureokrs/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/teodordanielsen/pureokrs/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { HttpClient } from '@angular/common/http';\nimport { catchError } from 'rxjs/operators';\nimport { of } from 'rxjs';\nimport { AuthenticationService } from './authentication.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./authentication.service\";\nexport var UserService = /*#__PURE__*/(function () {\n  var UserService = /*#__PURE__*/function () {\n    function UserService(http, auth) {\n      _classCallCheck(this, UserService);\n\n      this.http = http;\n      this.auth = auth;\n      this.userUrl = '/api/user';\n    }\n    /**GET Okr by id. Will return 404 when not found */\n\n\n    _createClass(UserService, [{\n      key: \"getUser\",\n      value: function getUser(id) {\n        var url = \"\".concat(this.userUrl, \"/\").concat(id);\n        return this.http.get(url, {\n          headers: {\n            Authorization: \"Bearer \".concat(this.auth.getToken())\n          }\n        }).pipe(catchError(this.handleError(\"getUser id=\".concat(id))));\n      }\n      /**GET users by company. Will return 404 when not found */\n\n    }, {\n      key: \"getUsers\",\n      value: function getUsers() {\n        var url = \"\".concat(this.userUrl, \"/company/users\");\n        return this.http.get(url, {\n          headers: {\n            Authorization: \"Bearer \".concat(this.auth.getToken())\n          }\n        }).pipe(catchError(this.handleError(\"getUsers\")));\n      }\n    }, {\n      key: \"searchUsers\",\n      value: function searchUsers(term) {\n        if (!term.trim()) {\n          //if not search term, return empty user array\n          return of([]);\n        }\n\n        return this.http.get(\"\".concat(this.userUrl, \"/search/\").concat(term), {\n          headers: {\n            Authorization: \"Bearer \".concat(this.auth.getToken())\n          }\n        }).pipe(catchError(this.handleError('searchUsers', [])));\n      }\n    }, {\n      key: \"deleteUser\",\n      value: function deleteUser(user) {\n        return this.http.delete(\"\".concat(this.userUrl, \"/delete/\").concat(user._id), {\n          headers: {\n            Authorization: \"Bearer \".concat(this.auth.getToken())\n          }\n        }).pipe(catchError(this.handleError('deleteUser', {})));\n      }\n      /**\n       * Handle Http operation that failed\n       * Let the app continue\n       * @param operation - name of the operation that failed\n       * @param result - optional value to return as the observable result\n       */\n\n    }, {\n      key: \"handleError\",\n      value: function handleError() {\n        var operation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'operation';\n        var result = arguments.length > 1 ? arguments[1] : undefined;\n        return function (error) {\n          //TODO: Send the error to remote logging infrastructure\n          console.error(error); //TODO: Better job of transforming error for user consumption\n\n          console.log(\"\".concat(operation, \" failed: \").concat(error.message)); // Let the app keep running by returning an empty result\n\n          return of(result);\n        };\n      }\n    }]);\n\n    return UserService;\n  }();\n\n  UserService.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthenticationService));\n  };\n\n  UserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n  return UserService;\n})();","map":null,"metadata":{},"sourceType":"module"}