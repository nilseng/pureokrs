{"ast":null,"code":"import _classCallCheck from \"/Users/teodordanielsen/pureokrs/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/teodordanielsen/pureokrs/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { HttpClient } from '@angular/common/http';\nimport { of, EMPTY } from 'rxjs';\nimport { map, catchError, tap } from 'rxjs/operators';\nimport { Router } from '@angular/router';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport var AuthenticationService = /*#__PURE__*/(function () {\n  var AuthenticationService = /*#__PURE__*/function () {\n    function AuthenticationService(http, router) {\n      _classCallCheck(this, AuthenticationService);\n\n      this.http = http;\n      this.router = router;\n    }\n\n    _createClass(AuthenticationService, [{\n      key: \"saveToken\",\n      value: function saveToken(token) {\n        localStorage.setItem('mean-token', token);\n        this.token = token;\n      }\n    }, {\n      key: \"getToken\",\n      value: function getToken() {\n        if (!this.token) {\n          this.token = localStorage.getItem('mean-token');\n        }\n\n        return this.token;\n      }\n    }, {\n      key: \"logout\",\n      value: function logout() {\n        this.token = '';\n        window.localStorage.removeItem('mean-token');\n        this.router.navigateByUrl('/');\n      }\n    }, {\n      key: \"getUserDetails\",\n      value: function getUserDetails() {\n        var token = this.getToken();\n        var payload;\n\n        if (token) {\n          payload = token.split('.')[1];\n          payload = window.atob(payload);\n          payload = JSON.parse(payload);\n          payload.name = decodeURIComponent(payload.name);\n          payload.email = decodeURIComponent(payload.email);\n          payload.company = decodeURIComponent(payload.company);\n          return of(payload);\n        } else {\n          return EMPTY;\n        }\n      }\n    }, {\n      key: \"getUserDetailsSync\",\n      value: function getUserDetailsSync() {\n        var token = this.getToken();\n        var payload;\n\n        if (token) {\n          payload = token.split('.')[1];\n          payload = window.atob(payload);\n          payload = JSON.parse(payload);\n          payload.name = decodeURIComponent(payload.name);\n          payload.email = decodeURIComponent(payload.email);\n          payload.company = decodeURIComponent(payload.company);\n          return payload;\n        } else {\n          return null;\n        }\n      }\n    }, {\n      key: \"isLoggedIn\",\n      value: function isLoggedIn() {\n        var user = this.getUserDetailsSync();\n\n        if (user) {\n          return user.exp > Date.now() / 1000;\n        } else {\n          return false;\n        }\n      }\n    }, {\n      key: \"request\",\n      value: function request(method, type, user) {\n        var _this = this;\n\n        var base;\n\n        if (method === 'post') {\n          base = this.http.post(\"/api/\".concat(type), user);\n        } else {\n          base = this.http.get(\"/api/\".concat(type), {\n            headers: {\n              Authorization: \"Bearer \".concat(this.getToken())\n            }\n          });\n        }\n\n        var request = base.pipe(map(function (data) {\n          if (data.token) {\n            _this.saveToken(data.token);\n          }\n\n          return data;\n        }));\n        return request;\n      }\n    }, {\n      key: \"register\",\n      value: function register(user) {\n        return this.request('post', 'register', user);\n      }\n    }, {\n      key: \"login\",\n      value: function login(user) {\n        return this.request('post', 'login', user);\n      }\n    }, {\n      key: \"company\",\n      value: function company() {\n        return this.request('get', 'company');\n      }\n    }, {\n      key: \"addUser\",\n      value: function addUser(user) {\n        return this.http.post('/api/adduser', user, {\n          headers: {\n            Authorization: \"Bearer \".concat(this.getToken()),\n            'Content-Type': 'application/json'\n          }\n        }).pipe(tap(), catchError(this.handleError('addUser')));\n      }\n    }, {\n      key: \"sendResetEmail\",\n      value: function sendResetEmail(email) {\n        return this.http.post('/api/sendresetemail', {\n          'email': email\n        }, {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }).pipe(tap());\n      }\n    }, {\n      key: \"newPassword\",\n      value: function newPassword(email, token, password) {\n        var _this2 = this;\n\n        return this.http.post('/api/newpassword', {\n          'email': email,\n          'token': token,\n          'password': password\n        }, {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }).pipe(map(function (data) {\n          if (data.token) {\n            _this2.saveToken(data.token);\n          }\n\n          return data;\n        }));\n      }\n      /**\n       * Handle Http operation that failed\n       * Let the app continue\n       * @param operation - name of the operation that failed\n       * @param result - optional value to return as the observable result\n       */\n\n    }, {\n      key: \"handleError\",\n      value: function handleError() {\n        var operation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'operation';\n        var result = arguments.length > 1 ? arguments[1] : undefined;\n        return function (error) {\n          //TODO: Send the error to remote logging infrastructure\n          console.error(error); //TODO: Better job of transforming error for user consumption\n\n          console.log(\"\".concat(operation, \" failed: \").concat(error.message)); // Let the app keep running by returning an empty result\n\n          return of(result);\n        };\n      }\n    }]);\n\n    return AuthenticationService;\n  }();\n\n  AuthenticationService.ɵfac = function AuthenticationService_Factory(t) {\n    return new (t || AuthenticationService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n\n  AuthenticationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthenticationService,\n    factory: AuthenticationService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthenticationService;\n})();","map":null,"metadata":{},"sourceType":"module"}