{"ast":null,"code":"import _slicedToArray from \"/Users/teodordanielsen/pureokrs/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"/Users/teodordanielsen/pureokrs/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/teodordanielsen/pureokrs/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/teodordanielsen/pureokrs/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { of, BehaviorSubject, combineLatest, merge, Subject } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { hierarchy } from 'd3-hierarchy';\nimport * as d3 from \"d3\";\nimport { AuthenticationService } from './authentication.service';\nimport { Okr } from './okr/okr';\nimport { OkrNode } from './okr/okr-node';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./authentication.service\";\nvar httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\nexport var OkrService = /*#__PURE__*/(function () {\n  var OkrService = /*#__PURE__*/function () {\n    function OkrService(http, auth) {\n      var _this = this;\n\n      _classCallCheck(this, OkrService);\n\n      this.http = http;\n      this.auth = auth;\n      this.okrsUrl = '/api/okr';\n      this.deletedOkrSubject = new Subject();\n      this.deletedOkr$ = this.deletedOkrSubject.asObservable();\n      this.savedOkrNodeSubject = new Subject();\n      this.savedOkrNode$ = this.savedOkrNodeSubject.asObservable();\n      this.okrHierarchyIsLoadingSubject = new BehaviorSubject(true);\n      this.okrHierarchyIsLoading$ = this.okrHierarchyIsLoadingSubject.asObservable();\n      this.okrTreeIsLoadingSubject = new BehaviorSubject(true);\n      this.okrTreeIsLoading$ = this.okrTreeIsLoadingSubject.asObservable();\n      this.treeConfigSubject = new BehaviorSubject(undefined);\n      this.treeConfig$ = this.treeConfigSubject.asObservable();\n      this.okrsWithActionsSubject = new BehaviorSubject(undefined);\n      this.okrHierarchyWithActionsSubject = new BehaviorSubject(undefined);\n      this.okrs$ = this.getOkrs().pipe( // Update cache whenever okrs are retrieved from the db\n      tap(function (okrs) {\n        return _this.okrsWithActionsSubject.next(okrs);\n      }));\n      this.okrsCache$ = merge(this.okrs$, this.okrsWithActionsSubject);\n      this.okrHierarchy$ = this.okrs$.pipe(map(function (okrs) {\n        if (!okrs) return;\n        return hierarchy(_this.createOkrHierarchy(okrs));\n      }), tap(function (okrHierarchy) {\n        return _this.okrHierarchyWithActionsSubject.next(okrHierarchy);\n      }), tap(function (_) {\n        return _this.okrHierarchyIsLoadingSubject.next(false);\n      }));\n      this.okrHierarchyCache$ = merge(this.okrHierarchy$, this.okrHierarchyWithActionsSubject);\n      this.keyResults$ = this.okrs$.pipe(map(function (okrs) {\n        var krs = [];\n        okrs.forEach(function (okr) {\n          return krs = [].concat(_toConsumableArray(krs), _toConsumableArray(okr.keyResults));\n        });\n        return krs;\n      }));\n      this.okrTreeWithActions$ = combineLatest([this.okrHierarchyCache$, this.treeConfig$]).pipe(map(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            hierarchy = _ref2[0],\n            treeConfig = _ref2[1];\n\n        if (!hierarchy) return;\n        hierarchy.each(function (node) {\n          node.data.width = treeConfig.nodeWidth;\n          node.data.height = treeConfig.nodeHeight;\n          node.data.offsetX = treeConfig.offsetX;\n          node.data.offsetY = treeConfig.offsetY;\n        });\n        var tree = d3.tree();\n        tree.size([treeConfig.width, treeConfig.height]);\n        tree.nodeSize([treeConfig.nodeWidth, treeConfig.nodeHeight * 1.5]);\n        tree.separation(function separation(a, b) {\n          return a.parent == b.parent ? 1.2 : 1.4;\n        });\n        return tree(hierarchy);\n      }), tap(function (_) {\n        return _this.okrTreeIsLoadingSubject.next(false);\n      }));\n    }\n\n    _createClass(OkrService, [{\n      key: \"okrSaved\",\n      value: function okrSaved(savedOkrNode) {\n        this.savedOkrNodeSubject.next(savedOkrNode);\n        this.okrsWithActionsSubject.next([savedOkrNode.okr].concat(_toConsumableArray(this.okrsWithActionsSubject.value)));\n        this.addHierarchyNode(savedOkrNode);\n      }\n    }, {\n      key: \"addHierarchyNode\",\n      value: function addHierarchyNode(okrNode) {\n        var currentHierarchy = this.okrHierarchyWithActionsSubject.value;\n        if (!okrNode || !currentHierarchy) return;\n\n        if (okrNode.okr.parent) {\n          currentHierarchy.each(function (node) {\n            if (node.data.okr._id === okrNode.okr.parent && !node.data.children.map(function (child) {\n              return child.okr._id;\n            }).includes(okrNode.okr._id)) node.data.children.push(okrNode);\n          });\n        } else {\n          if (!currentHierarchy.data.children.map(function (child) {\n            return child.okr._id;\n          }).includes(okrNode.okr._id)) currentHierarchy.data.children.push(okrNode);\n        }\n\n        this.okrHierarchyWithActionsSubject.next(hierarchy(currentHierarchy.data));\n      }\n    }, {\n      key: \"okrDeleted\",\n      value: function okrDeleted(deletedOkrNode) {\n        this.deletedOkrSubject.next(deletedOkrNode);\n        this.okrsWithActionsSubject.next(this.okrsWithActionsSubject.value.filter(function (okr) {\n          return okr._id !== deletedOkrNode.data.okr._id;\n        }));\n        this.deleteHierarchyNode(deletedOkrNode.data);\n      }\n    }, {\n      key: \"deleteHierarchyNode\",\n      value: function deleteHierarchyNode(okrNode) {\n        var _currentHierarchy$dat;\n\n        var _a;\n\n        var currentHierarchy = this.okrHierarchyWithActionsSubject.value;\n        if (!okrNode || !currentHierarchy) return;\n\n        if (okrNode.okr.parent) {\n          currentHierarchy.each(function (node) {\n            if (node.data.okr._id === okrNode.okr.parent) node.data.children = node.data.children.filter(function (child) {\n              return child.okr._id !== okrNode.okr._id;\n            });\n          });\n        } else {\n          currentHierarchy.data.children = currentHierarchy.data.children.filter(function (child) {\n            return child.okr._id !== okrNode.okr._id;\n          });\n        }\n\n        if (((_a = okrNode.children) === null || _a === void 0 ? void 0 : _a.length) > 0) (_currentHierarchy$dat = currentHierarchy.data.children).push.apply(_currentHierarchy$dat, _toConsumableArray(okrNode.children.map(function (child) {\n          return Object.assign(Object.assign({}, child), {\n            okr: Object.assign(Object.assign({}, child.okr), {\n              parent: undefined\n            })\n          });\n        })));\n        this.okrHierarchyWithActionsSubject.next(hierarchy(currentHierarchy.data));\n      }\n      /** Recursive function for adding child OKRs to parent OKRs */\n\n    }, {\n      key: \"createOkrHierarchy\",\n      value: function createOkrHierarchy(okrs, okrNode) {\n        var _this2 = this;\n\n        if (!okrs) return undefined;\n\n        if (!okrNode) {\n          // Create the invisible root OKR node\n          okrNode = new OkrNode(new Okr('')); // Creating an OKR Node for every OKR without a parent OKR and adding each to the root node children array\n\n          okrNode.children = okrs.filter(function (okr) {\n            return !okr.parent;\n          }).map(function (okr) {\n            return new OkrNode(okr);\n          });\n        } else {\n          // Creating an OKR Node for every child OKR and adding each to the parent OKR Node children array\n          okrNode.children = okrs.filter(function (okr) {\n            return okr.parent === okrNode.okr._id;\n          }).map(function (okr) {\n            return new OkrNode(okr);\n          });\n        } // Adding all OKR children recursively to their parents\n\n\n        okrNode.children.map(function (node) {\n          return _this2.createOkrHierarchy(okrs, node);\n        });\n        return okrNode;\n      }\n      /**GET OKRs from the server */\n\n    }, {\n      key: \"getOkrs\",\n      value: function getOkrs() {\n        return this.http.get(\"\".concat(this.okrsUrl, \"/company/all\"), {\n          headers: {\n            Authorization: \"Bearer \".concat(this.auth.getToken())\n          }\n        }).pipe(catchError(this.handleError('getOkrs')));\n      }\n      /**GET Okr by id. Will return 404 when not found */\n\n    }, {\n      key: \"getOkr\",\n      value: function getOkr(id) {\n        var url = \"\".concat(this.okrsUrl, \"/\").concat(id);\n        return this.http.get(url, {\n          headers: {\n            Authorization: \"Bearer \".concat(this.auth.getToken())\n          }\n        }).pipe(catchError(this.handleError(\"getOkr id=\".concat(id))));\n      }\n      /**GET okrs whose objective contains search term */\n\n    }, {\n      key: \"searchOkrs\",\n      value: function searchOkrs(term) {\n        if (!term.trim()) {\n          //if not search term, return empty OKR array\n          return of([]);\n        }\n\n        return this.http.get(\"\".concat(this.okrsUrl, \"/objective/\").concat(term), {\n          headers: {\n            Authorization: \"Bearer \".concat(this.auth.getToken())\n          }\n        }).pipe(catchError(this.handleError('searchOkrs', [])));\n      }\n      /**GET the child OKRs of parent OKR */\n\n    }, {\n      key: \"getChildren\",\n      value: function getChildren(id) {\n        return this.http.get(\"\".concat(this.okrsUrl, \"/children/\").concat(id), {\n          headers: {\n            Authorization: \"Bearer \".concat(this.auth.getToken())\n          }\n        }).pipe(catchError(this.handleError('getChildren', [])));\n      }\n      /**POST: add a new OKR to the server */\n\n    }, {\n      key: \"createOkr\",\n      value: function createOkr(okr) {\n        return this.http.post(this.okrsUrl, {\n          'okr': okr\n        }, {\n          headers: {\n            Authorization: \"Bearer \".concat(this.auth.getToken()),\n            'Content-Type': 'application/json'\n          }\n        }).pipe(catchError(this.handleError('createOkr')));\n      }\n      /**DELETE: delete the OKR from the server */\n\n    }, {\n      key: \"deleteOkr\",\n      value: function deleteOkr(okr) {\n        var id = typeof okr === 'string' ? okr : okr._id;\n        var url = \"\".concat(this.okrsUrl, \"/\").concat(id);\n        return this.http.delete(url, {\n          headers: {\n            Authorization: \"Bearer \".concat(this.auth.getToken()),\n            'Content-Type': 'application/json'\n          }\n        }).pipe(catchError(this.handleError('deleteOkr')));\n      }\n      /**PUT: update the OKR on the server */\n\n    }, {\n      key: \"updateOkr\",\n      value: function updateOkr(okr) {\n        return this.http.put(this.okrsUrl, okr, {\n          headers: {\n            Authorization: \"Bearer \".concat(this.auth.getToken()),\n            'Content-Type': 'application/json'\n          }\n        }).pipe(catchError(this.handleError('updateOkr')));\n      }\n      /**PUT: Add child OKR to parent OKR */\n\n    }, {\n      key: \"addChild\",\n      value: function addChild(parentId, childId) {\n        return this.http.put(\"\".concat(this.okrsUrl, \"/child\"), {\n          'parentId': parentId,\n          'childId': childId\n        }, {\n          headers: {\n            Authorization: \"Bearer \".concat(this.auth.getToken()),\n            'Content-Type': 'application/json'\n          }\n        }).pipe(catchError(this.handleError('addChild')));\n      }\n      /**PUT: Remove child OKR from parent OKR */\n\n    }, {\n      key: \"removeChild\",\n      value: function removeChild(parentId, childId) {\n        return this.http.put(\"\".concat(this.okrsUrl, \"/removeChild\"), {\n          'parentId': parentId,\n          'childId': childId\n        }, {\n          headers: {\n            Authorization: \"Bearer \".concat(this.auth.getToken()),\n            'Content-Type': 'application/json'\n          }\n        }).pipe(catchError(this.handleError('addChild')));\n      }\n      /**\n       * Handle Http operation that failed\n       * Let the app continue\n       * @param operation - name of the operation that failed\n       * @param result - optional value to return as the observable result\n       */\n\n    }, {\n      key: \"handleError\",\n      value: function handleError() {\n        var operation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'operation';\n        var result = arguments.length > 1 ? arguments[1] : undefined;\n        return function (error) {\n          //TODO: Send the error to remote logging infrastructure\n          console.error(error); //TODO: Better job of transforming error for user consumption\n\n          console.log(\"\".concat(operation, \" failed: \").concat(error.message)); // Let the app keep running by returning an empty result\n\n          return of(result);\n        };\n      }\n    }]);\n\n    return OkrService;\n  }();\n\n  OkrService.ɵfac = function OkrService_Factory(t) {\n    return new (t || OkrService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthenticationService));\n  };\n\n  OkrService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: OkrService,\n    factory: OkrService.ɵfac,\n    providedIn: 'root'\n  });\n  return OkrService;\n})();","map":null,"metadata":{},"sourceType":"module"}